name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.23.4'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s")
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: '${{ steps.version.outputs.version }}',
            name: 'Release ${{ steps.version.outputs.version }}',
            body: `## What's Changed\n\n${{ steps.changelog.outputs.changelog }}\n\n## Installation\n\nDownload the appropriate binary for your platform from the assets below.\n\n### Quick Install\n\`\`\`bash\n# Linux/macOS\ncurl -L https://github.com/makutaku/blockbench/releases/download/${{ steps.version.outputs.version }}/blockbench-linux-amd64 -o blockbench\nchmod +x blockbench\n\n# Or use the installer script\ncurl -sSL https://raw.githubusercontent.com/makutaku/blockbench/main/install.sh | bash\n\`\`\``,
            draft: false,
            prerelease: false
          });
          return release.id;

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux  
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        COMMIT=$(git rev-parse HEAD)
        DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        BINARY_NAME="blockbench-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="blockbench-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
        fi
        
        go build -ldflags " \
          -X github.com/makutaku/blockbench/internal/version.Version=$VERSION \
          -X github.com/makutaku/blockbench/internal/version.GitCommit=$COMMIT \
          -X github.com/makutaku/blockbench/internal/version.BuildDate=$DATE \
          -s -w" \
          -o "./$BINARY_NAME" \
          ./cmd/blockbench

    - name: Create checksum
      run: |
        BINARY_NAME="blockbench-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="blockbench-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
        fi
        sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"

    - name: Upload Release Asset
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const binaryName = '${{ matrix.goos }}' === 'windows' 
            ? 'blockbench-${{ matrix.goos }}-${{ matrix.goarch }}.exe'
            : 'blockbench-${{ matrix.goos }}-${{ matrix.goarch }}';
          
          // Upload binary
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: '${{ needs.create-release.outputs.release_id }}',
            name: binaryName,
            data: fs.readFileSync(binaryName)
          });
          
          // Upload checksum
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: '${{ needs.create-release.outputs.release_id }}',
            name: binaryName + '.sha256',
            data: fs.readFileSync(binaryName + '.sha256')
          });

  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build all platforms
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        COMMIT=$(git rev-parse HEAD)
        DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        # Build for all platforms
        export VERSION COMMIT DATE
        make build-all

    - name: Create source archive
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        git archive --format=tar.gz --prefix=blockbench-${VERSION#v}/ HEAD > blockbench-${VERSION#v}.tar.gz
        sha256sum blockbench-${VERSION#v}.tar.gz > blockbench-${VERSION#v}.tar.gz.sha256

    - name: Upload source archive
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const version = '${{ steps.version.outputs.version }}';
          const versionClean = version.replace('v', '');
          
          // Upload source archive
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: '${{ needs.create-release.outputs.release_id }}',
            name: `blockbench-${versionClean}.tar.gz`,
            data: fs.readFileSync(`blockbench-${versionClean}.tar.gz`)
          });
          
          // Upload source checksum
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: '${{ needs.create-release.outputs.release_id }}',
            name: `blockbench-${versionClean}.tar.gz.sha256`,
            data: fs.readFileSync(`blockbench-${versionClean}.tar.gz.sha256`)
          });